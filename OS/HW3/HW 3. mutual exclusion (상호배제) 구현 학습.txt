HW 3. mutual exclusion (상호배제) 구현 학습

 

1. Dekker’s algorithm 구현

- 1부터 100까지의 숫자에 3을 곱한 수를 출력

- 2개의 multi-thread로 구현

- 각 thread 마다 동일한 양의 숫자가 출력되어야 함

(예: 0번 thread에 1-50까지 숫자에 3을 곱한 숫자 출력, 1번 thread에 51부터 100까지의 숫자에 3을 곱한 숫자 출력)

 

Peterson’s algorithm 구현
- 1부터 100까지의 숫자에 3을 곱한 수를 출력

- 2개의 multi-thread로 구현

- 각 thread 마다 동일한 양의 숫자가 출력되어야 함

(예: 0번 thread에 1-50까지 숫자에 3을 곱한 숫자 출력, 1번 thread에 51부터 100까지의 숫자에 3을 곱한 숫자 출력)

 

Dijkstra’s algorithm (N process) 구현
- 1부터 100까지의 숫자에 3을 곱한 수를 출력

- 4개의 multi-thread로 구현

- 각 thread 마다 동일한 양의 숫자가 출력되어야 함

(예: 0번 thread에 1-25까지 숫자에 3을 곱한 숫자 출력, 1번 thread에 26부터 50까지의 숫자에 3을 곱한 숫자 출력, 2번 thread에 51부터 75까지의 숫자에 3을 곱한 숫자 출력, 3번 thread에 76부터 100까지의 숫자에 3을 곱한 숫자 출력)

 

Semaphore 구현
- 1부터 100까지의 숫자에 3을 곱한 수를 출력

- 4개의 multi-thread로 구현

- 세마포 초기값은 1로 설정

- 각 thread 마다 동일한 양의 숫자가 출력되어야 함

(예: 0번 thread에 1-25까지 숫자에 3을 곱한 숫자 출력, 1번 thread에 26부터 50까지의 숫자에 3을 곱한 숫자 출력, 2번 thread에 51부터 75까지의 숫자에 3을 곱한 숫자 출력, 3번 thread에 76부터 100까지의 숫자에 3을 곱한 숫자 출력)

 

※ 1, 2, 3, 4번 모두 겹치는 숫자가 나오면 안됨 (mutual exclusion 확인)

※ 1-100까지의 숫자는 전역 변수로 설정

 

■ 결과 제출물

- 리눅스 환경에서 C로 구현

- 소스코드: .c 파일

- 결과 보고서 (hwp, word, pdf 등): 소스 코드 설명과 대략적인 결과 분석을 보고서에 기입

- 결과를 출력할 때 각 출력값이 어느 thread에서 계산되었는지도 출력

- 최종 결과 제출물 파일은 zip 파일로 압축해서 제출

- 결과 값을 캡쳐하여 보고서에 기입

- 제출 기한: 4/16, 11:59 pm